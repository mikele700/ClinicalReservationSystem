package dao;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.sql.*;

import business.clienti.Cliente;
import business.exceptions.ClienteInesistente;
import business.exceptions.NessunaPrenotazioneAssegnataAllaStanzaTrovata;
import business.exceptions.StanzaInesistente;
import business.prenotazioni.*;
import business.stanze.Stanza;


public class PrenotazioneDAO {
	
	public static void create(Prenotazione p) throws SQLException, StanzaInesistente, ClienteInesistente{
		if(p.getCliente().getIdPersistenza()==null){
			throw new ClienteInesistente();
		}
		if(p.getStanza().getIdPersistenza()==null)
			throw new StanzaInesistente();
		Connection c=DBManager.getConnection();
		try(PreparedStatement pstat=c.prepareStatement("INSERT INTO PRENOTAZIONI(Orario, CodiceAnalisi, Stato, Cliente, Stanza) VALUES (?,?,?,?,?)")){
			pstat.setTimestamp(1, new java.sql.Timestamp(p.getOrario().getTimeInMillis()));
			pstat.setString(2, p.getCodiceAnalisi());
			pstat.setString(3, p.getStato());
			pstat.setInt(4, p.getCliente().getIdPersistenza());
			pstat.setInt(5, p.getStanza().getIdPersistenza());
			pstat.executeUpdate();
			ResultSet rs=pstat.getGeneratedKeys();
			if(!rs.next())
				throw new SQLException("ID value was not autogenerated!");
			Integer id= rs.getInt(1);
			p.setIdPersistenza(id);
			restoredObjects.put(id, p);
		}
	}
	
	public static List<Prenotazione> leggiPrenotazioniAssegnatePerStanza(Stanza s) throws SQLException, NessunaPrenotazioneAssegnataAllaStanzaTrovata{
		if(s.getIdPersistenza()==null){
			StanzaDAO.create(s);
			throw new NessunaPrenotazioneAssegnataAllaStanzaTrovata();
		}
		Connection c=DBManager.getConnection();
		PreparedStatement pstat=c.prepareStatement("SELECT PRENOTAZIONI.ID AS ID, Orario, CodiceAnalisi, Stato, Cliente, Stanza, Nome, Cognome, Residenza, DataNascita, CF, NumTelefonico, Email, Identificativo FROM PRENOTAZIONI, CLIENTI, STANZE WHERE (PRENOTAZIONI.Cliente=CLIENTI.ID)AND(PRENOTAZIONI.Stanza=STANZE.ID)AND(Stato='ASSEGNATA') AND(PRENOTAZIONI.Stanza=?)");
		pstat.setInt(1, s.getIdPersistenza());
		ResultSet rs= pstat.executeQuery();
		List<Prenotazione> ListaPrenotazioniAssegnatePerStanza= new java.util.ArrayList<Prenotazione>();
		while(rs.next()){
			Prenotazione p;
			Integer id=rs.getInt("ID");
			if(restoredObjects.containsKey(id))
				p = new Prenotazione(restoredObjects.get(id));
			else{
				java.sql.Timestamp t=rs.getTimestamp("Orario");
				@SuppressWarnings("deprecation")
				GregorianCalendar orario=new GregorianCalendar(t.getYear()+1900, t.getMonth(), t.getDate(), t.getHours(), t.getMinutes());
				Integer cliente=rs.getInt("Cliente");
				Cliente cl;
				if(ClienteDAO.restoredObjects.containsKey(cliente))
					cl=new Cliente(ClienteDAO.restoredObjects.get(cliente));
				else{
					GregorianCalendar dataNascita= new GregorianCalendar();
					dataNascita.setTime(rs.getDate("DataNascita"));
					cl=new Cliente(rs.getString("Nome"),rs.getString("Cognome"), rs.getString("Residenza"), dataNascita, rs.getString("CF"), rs.getString("NumTelefonico"), rs.getString("Email"), cliente);
				}
				Integer stanza=rs.getInt("Stanza");
				Stanza st;
				if(StanzaDAO.restoredObjects.containsKey(stanza))
					st=new Stanza(StanzaDAO.restoredObjects.get(stanza));
				else{
					st=new Stanza(rs.getString("Identificativo"), stanza);
				}
				p=new Prenotazione(orario, rs.getString("CodiceAnalisi"), cl, st, id);
				restoredObjects.put(id, p);
			}
			ListaPrenotazioniAssegnatePerStanza.add(p);
		}
		pstat.close();
		s.setPrenotazioniAssegnate(ListaPrenotazioniAssegnatePerStanza);
		if(ListaPrenotazioniAssegnatePerStanza.isEmpty())
			throw new NessunaPrenotazioneAssegnataAllaStanzaTrovata();
		return ListaPrenotazioniAssegnatePerStanza;
	}
	protected static Map<Integer, Prenotazione> restoredObjects= new java.util.HashMap<Integer, Prenotazione>();

}
